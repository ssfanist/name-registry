{"version":3,"sources":["data/utils.jsx","data/contract.jsx","components/header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["RefreshContext","createContext","fast","slow","RefreshContextProvider","children","useState","setFast","setSlow","useEffect","interval","setInterval","a","prev","clearInterval","Provider","value","connectWithMetamask","window","ethereum","request","method","accounts","length","useBalance","isReady","fastRefresh","useContext","slowRefresh","useRefresh","balance","setBalance","fetch","web3","Web3","account","eth","getBalance","bal","BigNumber","dividedBy","pow","toFixed","setName","name","getContract","methods","send","from","gas","Contract","registryAbi","TOAST_OPTIONS","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","Header","text","setText","isLoading","setLoading","isMetamaskEnabled","chainId","setChainId","_chainId","replace","on","useChainId","handleSet","count","toast","error","info","id","className","onChange","e","target","onClick","SmoothScroll","speed","speedAsDuration","Boolean","location","hostname","match","require","config","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.68e17513.chunk.js","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\nimport { createContext, useContext, useState, useEffect } from \"react\";\n\nconst FAST_INTERVAL = 10000;\nconst SLOW_INTERVAL = 100000;\n\nconst RefreshContext = createContext({ fast: 0, slow: 0 });\n\nexport const RefreshContextProvider = ({ children }) => {\n  const [fast, setFast] = useState(0);\n  const [slow, setSlow] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1);\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1);\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <RefreshContext.Provider value={{ fast, slow }}>\n      {children}\n    </RefreshContext.Provider>\n  );\n};\n\nexport const useRefresh = () => {\n  const { slow, fast } = useContext(RefreshContext);\n  return { slowRefresh: slow, fastRefresh: fast };\n};\n","import { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport BigNumber from \"bignumber.js\";\nimport registryAbi from \"./registry.json\";\nimport { useRefresh } from \"./utils\";\n\nexport const connectWithMetamask = async () => {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n  if (accounts.length > 0) return accounts[0];\n  return null;\n};\n\nexport const useChainId = (isReady) => {\n  const [chainId, setChainId] = useState(\"\");\n\n  useEffect(() => {\n    const fetch = async () => {\n      const _chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n      setChainId(_chainId.replace(\"0x\", \"\"));\n    };\n\n    if (isReady) {\n      fetch();\n\n      window.ethereum.on(\"chainChanged\", (_chainId) => {\n        setChainId(_chainId.replace(\"0x\", \"\"));\n      });\n    }\n  }, [isReady]);\n\n  return chainId;\n};\n\nexport const useBalance = (isReady) => {\n  const { fastRefresh } = useRefresh();\n  const [balance, setBalance] = useState(\"\");\n\n  useEffect(() => {\n    const fetch = async () => {\n      const web3 = new Web3(window.ethereum);\n      const account = await connectWithMetamask();\n      if (account) {\n        const bal = await web3.eth.getBalance(account);\n        setBalance(new BigNumber(bal).dividedBy(new BigNumber(10).pow(18)).toFixed(2));\n      }\n    };\n\n    if (isReady) fetch();\n  }, [fastRefresh, isReady]);\n\n  return balance;\n};\n\nexport const setName = (account, name) =>\n  getContract()\n    .methods.setName(name)\n    .send({\n      from: account,\n      gas: 300000,\n    });\n\nconst getContract = () => {\n  const web3 = new Web3(window.ethereum);\n\n  return new web3.eth.Contract(\n    registryAbi,\n    \"0xC0eA939D5029679a694B84c7b1D8309F1F7A0147\"\n  );\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport { useState, useEffect } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport {\n  connectWithMetamask,\n  useChainId,\n  useBalance,\n  setName,\n  // readName,\n} from \"../data/contract\";\n\nconst TOAST_OPTIONS = {\n  position: \"top-center\",\n  autoClose: 3000,\n  hideProgressBar: true,\n  closeOnClick: true,\n  pauseOnHover: false,\n  draggable: false,\n};\nconst TARGET_NETWORK = \"3\";\n\nexport const Header = () => {\n  const [text, setText] = useState('');\n  const [isLoading, setLoading] = useState(true);\n\n  const isMetamaskEnabled = typeof window.ethereum !== \"undefined\";\n  const chainId = useChainId(isMetamaskEnabled);\n  const balance = useBalance(isMetamaskEnabled && chainId === TARGET_NETWORK);\n\n  useEffect(() => {\n    if (balance.length > 0) setLoading(false);\n  }, [balance]);\n\n  const handleSet = async (count) => {\n    if (text.length  === 0) return;\n\n    setLoading(true);\n    const account = await connectWithMetamask();\n    if (account === null) {\n      toast.error(\"Account not connected\", TOAST_OPTIONS);\n      return;\n    }\n    setName(account, text)\n      .on(\"transactionHash\", () => setLoading(false))\n      .on(\"receipt\", () =>\n        toast.info(\"Name set successfully\", TOAST_OPTIONS)\n      )\n      .on(\"error\", () => {\n        setLoading(false);\n        toast.error(\"Name not set. Errors occurred\", TOAST_OPTIONS);\n      });\n  };\n\n  return (\n    <div id=\"header\">\n      <div className=\"container\">\n        <div className=\"row\">\n          {isLoading && <div className=\"loader\" />}\n          <div className=\"col-xs-12 col-md-6\">\n            <div className=\"info-outer\">\n              {!isMetamaskEnabled ? (\n                <span className=\"metamask\">\n                  Please install Metamask for proper use.\n                </span>\n              ) : chainId !== TARGET_NETWORK ? (\n                <span className=\"metamask\">\n                  Current network is not the target network. Please switch to\n                  ropsten.\n                </span>\n              ) : (\n                <div className=\"info-inner text-center\">\n                  <p>Balance {!balance ? \"0.00\" : balance} ETH</p>\n                  <input className=\"input\" value={text} onChange={e => setText(e.target.value)} />\n                  <a\n                    onClick={handleSet}\n                    className={`btn btn-mint btn-lg page-scroll ${\n                      isMetamaskEnabled ? \"\" : \"btn-disabled\"\n                    }`}\n                  >\n                    Set Name\n                  </a>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      <ToastContainer />\n    </div>\n  );\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport SmoothScroll from \"smooth-scroll\";\nimport { Header } from \"./components/header\";\nimport { RefreshContextProvider } from \"./data/utils\";\nimport \"./App.css\";\n\nexport const scroll = new SmoothScroll('a[href*=\"#\"]', {\n  speed: 1000,\n  speedAsDuration: true,\n});\n\nexport default () => (\n  <RefreshContextProvider>\n    <div>\n      <Header />\n    </div>\n  </RefreshContextProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nrequire(\"dotenv\").config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}